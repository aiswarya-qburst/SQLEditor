{"version":3,"sources":["components/Editor.js","components/Button.js","components/Result.js","components/Sidebar.js","App.js","index.js"],"names":["QueryEditor","handleChange","onValueChange","code","highlight","padding","placeholder","style","fontFamily","fontSize","height","border","Button","handleClick","type","className","onClick","Result","result","data","React","useMemo","columns","header","length","Object","keys","forEach","k","Header","toUpperCase","accessor","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","Sidebar","handleMenuClick","useState","info","updateInfo","useEffect","fetch","then","res","json","obj","t","includes","TABLE_NAME","getTableInfo","catch","e","console","warn","iconShape","entries","key","values","title","onOpenChange","isOpen","tableName","query","val","COLUMN_NAME","COLUMN_TYPE","App","updateQuery","updateResult","fetched","updateFetched","Editor","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ba9be30a.chunk.js","sourcesContent":["import React from 'react';\nimport Editor from 'react-simple-code-editor';\n\nconst QueryEditor = ({ handleChange }) => {\n    return <div>\n        <Editor\n            onValueChange={code => handleChange(code)}\n            highlight={() => {}}\n            padding={10}\n            placeholder=\"Type query here...\"\n            style={{\n                fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n                fontSize: 12,\n                height: \"200px\",\n                border: \"1px dashed black\"\n            }}\n      />\n        {/* <textarea \n            className=\"editor\"\n            onChange={e => handleChange(e.target.value)}\n            placeholder=\"Type query here...\">\n        </textarea> */}\n    </div>\n}\n\nexport default QueryEditor;","import React from 'react';\n\nconst Button = ({ handleClick }) => {\n    return <button type=\"button\" className=\"btn\" onClick={handleClick}>Run Query</button> \n}\n\nexport default Button;","import React from 'react';\nimport { useTable } from 'react-table';\n\nconst Result = ({ result }) => {\n    // if (fetched && typeof result === 'object') \n    //     alert(result.message);\n\n    const data = React.useMemo(() => result ? result : [], [result]);\n\n    const columns = React.useMemo(() => {\n        let header = [];\n        result.length > 0 && Object.keys(result[0]).forEach(k => {\n            header = [...header, { Header: k.toUpperCase(), accessor: k }]\n        });\n\n        return header;\n    }, [result]);\n\n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        prepareRow,\n    } = useTable({ columns, data })\n\n    return (\n        <table {...getTableProps()}>\n            <thead>\n                {headerGroups.map(headerGroup => (\n                    <tr className=\"header\" {...headerGroup.getHeaderGroupProps()}>\n                        {headerGroup.headers.map(column => (\n                            <th {...column.getHeaderProps()}>\n                                {column.render('Header')}\n                            </th>\n                        ))}\n                    </tr>\n                ))}\n            </thead>\n            <tbody {...getTableBodyProps()}>\n                {rows.map(row => {\n                    prepareRow(row)\n                    return (\n                        <tr {...row.getRowProps()}>\n                            {row.cells.map(cell => {\n                                return (\n                                    <td {...cell.getCellProps()}>\n                                        {cell.render('Cell')}\n                                    </td>\n                                )\n                            })}\n                        </tr>\n                    )\n                })}\n            </tbody>\n        </table>\n    )\n}\n\nexport default Result;","import React, { useEffect, useState } from 'react';\nimport { ProSidebar, Menu, MenuItem, SubMenu, SidebarHeader } from 'react-pro-sidebar';\nimport 'react-pro-sidebar/dist/css/styles.css';\n\nconst Sidebar = ({ handleMenuClick }) => {\n    const [info, updateInfo] = useState({});\n\n    /**\n     * Format information from db\n     * @param {Array<Object>} data data from db\n     * @returns formatted data\n     */\n    const getTableInfo = data => {\n        let obj = {};\n\n        data.map(t => {\n            if (Object.keys(obj).includes(t.TABLE_NAME)) {\n                obj[t.TABLE_NAME] = [...obj[t.TABLE_NAME], t];\n            } else {\n                obj = { ...obj, [t.TABLE_NAME]: [t] }\n            }\n\n            return true;\n        });\n\n        return obj;\n    }\n\n    /**\n     * When a table is selected from menu, show contents of that table\n     * @param {String} tableName table name selected from menu\n     */\n    const handleClick = (isOpen, tableName) => {\n        const query = `select * from ${tableName}`;\n\n        isOpen && fetch(`/users?sqlquery='${query}'`)\n            .then(res => res.json())\n            .then(data => handleMenuClick(data))\n            .catch(e => console.warn(e));\n    }\n\n    useEffect(() => {\n        const query = 'SELECT * FROM information_schema.columns WHERE table_schema=\"testdb\" ORDER BY table_name,ordinal_position';\n\n        fetch(`/users?sqlquery='${query}'`)\n            .then(res => res.json())\n            .then(data => updateInfo(getTableInfo(data)))\n            .catch(e => console.warn(e));\n    }, [])\n\n    return <ProSidebar>\n        <SidebarHeader>testdb</SidebarHeader>\n        {info &&\n            <Menu iconShape=\"square\">\n                {Object.entries(info).map(([key, values]) =>\n                    <SubMenu title={key} onOpenChange={isOpen => handleClick(isOpen, key)}>\n                        {values.map(val => <SubMenu title={val.COLUMN_NAME}>\n                            <MenuItem>{val.COLUMN_TYPE}</MenuItem>\n                        </SubMenu>\n                        )}\n                    </SubMenu>\n                )}\n            </Menu>\n        }\n    </ProSidebar>;\n}\n\nexport default Sidebar;\n//onClick={handleClick(key)}","import React from 'react';\n// import { useQuery } from \"react-query\";\nimport './App.css';\nimport Editor from './components/Editor';\nimport Button from './components/Button';\nimport Result from './components/Result';\nimport { useState } from 'react';\nimport Sidebar from './components/Sidebar';\n\nfunction App() {\n  const [query, updateQuery] = useState(\"\");\n  const [result, updateResult] = useState([]);\n  const [fetched, updateFetched] = useState(false);\n\n  // const response = useQuery(\"users\", fetchUsers);\n\n  const handleChange = data => updateQuery(data);\n\n  const handleClick = () => {\n    fetch(`/users?sqlquery='${query}'`)\n      .then(res => res.json())\n      .then(data => {\n        updateResult(data);\n        updateFetched(true);\n      })\n      .catch(e => console.warn(e));\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"sidenav\">\n        <Sidebar handleMenuClick={updateResult} />\n      </div>\n      <div className=\"main\">\n        <Editor handleChange={handleChange} />\n        <Button handleClick={handleClick} />\n        <Result result={result} fetched={fetched} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}